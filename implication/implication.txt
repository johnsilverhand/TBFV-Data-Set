SetLed:
//改 done
S=((msg=0)⇒(mode=1∧state=True))∨((msg=1)⇒(mode=1∧state=False))∨((msg=2)⇒(mode=0))

(and
    (and (= msg 0) → (and (= mode 1) (= state True)))
    (and (= msg 1) → (and (= mode 1) (= state False)))
    (and (= msg 2) → (and(= mode 0)(= state False)))
)


IsGetTempTime:
//区分输入输出
S=((cur_tick≥start_tick∧(cur_tick−start_tick≥TIME_INTERVAL))→(read_flag=True∧start_tick=cur_tick))∨((cur_tick<start_tick∧(UINT32_MAX−start_tick+cur_tick≥TIME_INTERVAL))→(read_flag=True∧start_tick=cur_tick))∨((cur_tick<start_tick∧(UINT32_MAX−start_tick+cur_tick≥TIME_INTERVAL))→(read_flag=True∧start_tick=cur_tick))∨(¬((cur_tick≥start_tick∧(cur_tick−start_tick≥TIME_INTERVAL))∨(cur_tick<start_tick∧(UINT32_MAX−start_tick+cur_tick≥TIME_INTERVAL)))→(read_flag=False))∨(¬((cur_tick≥start_tick∧(cur_tick−start_tick≥TIME_INTERVAL))∨(cur_tick<start_tick∧(UINT32_MAX−start_tick+cur_tick≥TIME_INTERVAL)))→(read_flag=False))

(and
    (and (>= cur_tick start_tick) (>= (- cur_tick start_tick) TIME_INTERVAL) → (and (= read_flag True) (= start_tick cur_tick)))
    (and (< cur_tick start_tick) (>= (+ (- UINT32_MAX start_tick) cur_tick) TIME_INTERVAL) → (and (= read_flag True) (= start_tick cur_tick)))
    (not (or (and (>= cur_tick start_tick) (>= (- cur_tick start_tick) TIME_INTERVAL))
             (and (< cur_tick start_tick) (>= (+ (- UINT32_MAX start_tick) cur_tick) TIME_INTERVAL)))
    → (= read_flag False))
)

SetLedByLight:

S=((ad_readFlag=True∧ad_value×3.3/4095≥2.57∧mode=False)→(return True))∨((𝑎𝑑_𝑟𝑒𝑎𝑑𝐹𝑙𝑎𝑔=True∧ad_value×3.3/4095<2.57∧𝑚𝑜𝑑𝑒=False)→(return False))∨((ad_readFlag=True∧ ad_value×3.3/4095<2.57∧mode=False)→(return False))∨((¬𝑎𝑑_𝑟𝑒𝑎𝑑𝐹𝑙𝑎𝑔∨𝑚𝑜𝑑𝑒=True)→(return None))((¬ad_readFlag∨mode=True)→(return None))

(and
    (and 
        (= ad_readFlag True) 
        (>= (/ (* ad_value 3.3) 4095) 2.57) 
        (= mode False) 
    → (= return True))
    
    (and 
        (= ad_readFlag True) 
        (< (/ (* ad_value 3.3) 4095) 2.57) 
        (= mode False) 
    → (= return False))
    
    (and 
        (or 
            (= ad_readFlag False) 
            (= mode True)
        ) 
    → (= return None))
)


ValueCheck:

S=((cell_value!=None∧cell_value!=""∧re.match(number_pattern,cell_value)∨float(cell_value)−int(float(cell_value))=0)→(return (int(cell_value),type(int(cell_value)))))∨((cell_value!=None∧cell_value!=""∧re.match(number_pattern,cell_value)∧float(cell_value)−int(float(cell_value))!=0)→(return (cell_value,type(cell_value))))∨((cell_value!=None∧cell_value!=""∧¬re.match(number_pattern,cell_value))→(return (cell_value,type(cell_value))))∨((cell_value=None∨cell_value=""∨cell_value="")→(return (None,type(cell_value))))
//加标识~
(and
    (and 
        (not (= cell_value None)) 
        (not (= cell_value "")) 
        (not (= cell_value " ")) 
        (re.match number_pattern cell_value) 
        (= (- (float cell_value) (int (float cell_value))) 0) 
    → (and (= return_value (int cell_value)) (= return_type (type (int cell_value)))))

    (and 
        (not (= cell_value None)) 
        (not (= cell_value "")) 
        (not (= cell_value " ")) 
        (re.match number_pattern cell_value) 
        (not (= (- (float cell_value) (int (float cell_value))) 0)) 
    → (and (= return_value cell_value) (= return_type (type cell_value))))

    (and 
        (not (= cell_value None)) 
        (not (= cell_value "")) 
        (not (= cell_value " ")) 
        (not (re.match number_pattern cell_value)) 
    → (and (= return_luvae cell_value) (= return_type (type cell_value))))

    (and 
        (or (= cell_value None) (= cell_value "") (= cell_value " ")) 
    → (and (= return_value None) (= return_type (type cell_value))))
)
